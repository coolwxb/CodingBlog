<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[小小程序猿]]></title>
  <link href="http://daycoding.com/atom.xml" rel="self"/>
  <link href="http://daycoding.com/"/>
  <updated>2017-11-27T11:46:51+08:00</updated>
  <id>http://daycoding.com/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im">MWeb</generator>

  
  <entry>
    <title type="html"><![CDATA[Sequelize 创建连接]]></title>
    <link href="http://daycoding.com/15116580970818.html"/>
    <updated>2017-11-26T09:01:37+08:00</updated>
    <id>http://daycoding.com/15116580970818.html</id>
    <content type="html"><![CDATA[
<pre><code>const sequelize = new Sequelize(&#39;database&#39;, &#39;username&#39;, &#39;password&#39;, {
  // the sql dialect of the database
  // currently supported: &#39;mysql&#39;, &#39;sqlite&#39;, &#39;postgres&#39;, &#39;mssql&#39;
  dialect: &#39;mysql&#39;,

  // custom host; default: localhost
  host: &#39;my.server.tld&#39;,

  // custom port; default: dialect default
  port: 12345,

  // custom protocol; default: &#39;tcp&#39;
  // postgres only, useful for Heroku
  protocol: null,

  // disable logging; default: console.log
  logging: false,

  // you can also pass any dialect options to the underlying dialect library
  // - default is empty
  // - currently supported: &#39;mysql&#39;, &#39;postgres&#39;, &#39;mssql&#39;
  dialectOptions: {
    socketPath: &#39;/Applications/MAMP/tmp/mysql/mysql.sock&#39;,
    supportBigNumbers: true,
    bigNumberStrings: true
  },

  // the storage engine for sqlite
  // - default &#39;:memory:&#39;
  storage: &#39;path/to/database.sqlite&#39;,

  // disable inserting undefined values as NULL
  // - default: false
  omitNull: true,

  // a flag for using a native library or not.
  // in the case of &#39;pg&#39; -- set this to true will allow SSL support
  // - default: false
  native: true,

  // Specify options, which are used when sequelize.define is called.
  // The following example:
  //   define: { timestamps: false }
  // is basically the same as:
  //   sequelize.define(name, attributes, { timestamps: false })
  // so defining the timestamps for each model will be not necessary
  define: {
    
    underscored: false
    freezeTableName: false,
    charset: &#39;utf8&#39;,
    dialectOptions: {
      collate: &#39;utf8_general_ci&#39;
    },
    
    timestamps: true
  },

  // similar for sync: you can define this to always force sync for models
  sync: { force: true },

  // pool configuration used to pool database connections
  pool: {
    max: 5,
    idle: 30000,
    acquire: 60000,
  },

  // isolation level of each transaction
  // defaults to dialect default
  isolationLevel: Transaction.ISOLATION_LEVELS.REPEATABLE_READ
})
</code></pre>

<h1 id="toc_0">sequelize 查询参数</h1>

<pre><code>// Options is an object with the following keys:
sequelize
  .query(&#39;SELECT 1&#39;, {
    // A function (or false) for logging your queries
    // Will get called for every SQL query that gets send
    // to the server.
    logging: console.log,

    // If plain is true, then sequelize will only return the first
    // record of the result set. In case of false it will all records.
    plain: false,

    // Set this to true if you don&#39;t have a model definition for your query.
    raw: false,

    // The type of query you are executing. The query type affects how results are formatted before they are passed back.
    type: Sequelize.QueryTypes.SELECT
  })

// Note the second argument being null!
// Even if we declared a callee here, the raw: true would
// supersede and return a raw object.
sequelize
  .query(&#39;SELECT * FROM projects&#39;, { raw: true })
  .then(projects =&gt; {
    console.log(projects)
  })
</code></pre>

<h1 id="toc_1">sequelize sql占位符</h1>

<pre><code>sequelize
  .query(
    &#39;SELECT * FROM projects WHERE status = ?&#39;,
    { raw: true, replacements: [&#39;active&#39;]
  )
  .then(projects =&gt; {
    console.log(projects)
  })

sequelize
  .query(
    &#39;SELECT * FROM projects WHERE status = :status &#39;,
    { raw: true, replacements: { status: &#39;active&#39; } }
  )
  .then(projects =&gt; {
    console.log(projects)
  })
</code></pre>

<h1 id="toc_2">sequelize model 定义</h1>

<pre><code>const Foo = sequelize.define(&#39;foo&#39;, {
 // instantiating will automatically set the flag to true if not set
 flag: { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: true },

 // default values for dates =&gt; current time
 myDate: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },

 // setting allowNull to false will add NOT NULL to the column, which means an error will be
 // thrown from the DB when the query is executed if the column is null. If you want to check that a value
 // is not null before querying the DB, look at the validations section below.
 title: { type: Sequelize.STRING, allowNull: false },

 // Creating two objects with the same value will throw an error. The unique property can be either a
 // boolean, or a string. If you provide the same string for multiple columns, they will form a
 // composite unique key.
 uniqueOne: { type: Sequelize.STRING,  unique: &#39;compositeIndex&#39; },
 uniqueTwo: { type: Sequelize.INTEGER, unique: &#39;compositeIndex&#39; },

 // The unique property is simply a shorthand to create a unique constraint.
 someUnique: { type: Sequelize.STRING, unique: true },

 // It&#39;s exactly the same as creating the index in the model&#39;s options.
 { someUnique: { type: Sequelize.STRING } },
 { indexes: [ { unique: true, fields: [ &#39;someUnique&#39; ] } ] },

 // Go on reading for further information about primary keys
 identifier: { type: Sequelize.STRING, primaryKey: true },

 // autoIncrement can be used to create auto_incrementing integer columns
 incrementMe: { type: Sequelize.INTEGER, autoIncrement: true },

 // You can specify a custom field name via the &#39;field&#39; attribute:
 fieldWithUnderscores: { type: Sequelize.STRING, field: &#39;field_with_underscores&#39; },

 // It is possible to create foreign keys:
 bar_id: {
   type: Sequelize.INTEGER,

   references: {
     // This is a reference to another model
     model: Bar,

     // This is the column name of the referenced model
     key: &#39;id&#39;,

     // This declares when to check the foreign key constraint. PostgreSQL only.
     deferrable: Sequelize.Deferrable.INITIALLY_IMMEDIATE
   }
 }
})
</code></pre>

<h1 id="toc_3">DataTypes 类型</h1>

<pre><code>//常用
Sequelize.STRING                      // VARCHAR(255)
Sequelize.STRING(1234)                // VARCHAR(1234)
Sequelize.STRING.BINARY               // VARCHAR BINARY
Sequelize.TEXT                        // TEXT
Sequelize.TEXT(&#39;tiny&#39;)                // TINYTEXT

Sequelize.INTEGER                     // INTEGER
Sequelize.BIGINT                      // BIGINT
Sequelize.BIGINT(11)                  // BIGINT(11)

Sequelize.FLOAT                       // FLOAT
Sequelize.FLOAT(11)                   // FLOAT(11)
Sequelize.FLOAT(11, 12)               // FLOAT(11,12)

Sequelize.REAL                        // REAL        PostgreSQL only.
Sequelize.REAL(11)                    // REAL(11)    PostgreSQL only.
Sequelize.REAL(11, 12)                // REAL(11,12) PostgreSQL only.

Sequelize.DOUBLE                      // DOUBLE
Sequelize.DOUBLE(11)                  // DOUBLE(11)
Sequelize.DOUBLE(11, 12)              // DOUBLE(11,12)

Sequelize.DECIMAL                     // DECIMAL
Sequelize.DECIMAL(10, 2)              // DECIMAL(10,2)

Sequelize.DATE                        // DATETIME for mysql / sqlite, TIMESTAMP WITH TIME ZONE for postgres
Sequelize.DATE(6)                     // DATETIME(6) for mysql 5.6.4+. Fractional seconds support with up to 6 digits of precision
Sequelize.DATEONLY                    // DATE without time.
Sequelize.BOOLEAN                     // TINYINT(1)

Sequelize.ENUM(&#39;value 1&#39;, &#39;value 2&#39;)  // An ENUM with allowed values &#39;value 1&#39; and &#39;value 2&#39;
Sequelize.ARRAY(Sequelize.TEXT)       // Defines an array. PostgreSQL only.

Sequelize.JSON                        // JSON column. PostgreSQL, SQLite and MySQL only.
Sequelize.JSONB                       // JSONB column. PostgreSQL only.

Sequelize.BLOB                        // BLOB (bytea for PostgreSQL)
Sequelize.BLOB(&#39;tiny&#39;)                // TINYBLOB (bytea for PostgreSQL. Other options are medium and long)

Sequelize.UUID                        // UUID datatype for PostgreSQL and SQLite, CHAR(36) BINARY for MySQL (use defaultValue: Sequelize.UUIDV1 or Sequelize.UUIDV4 to make sequelize generate the ids automatically)

Sequelize.RANGE(Sequelize.INTEGER)    // Defines int4range range. PostgreSQL only.
Sequelize.RANGE(Sequelize.BIGINT)     // Defined int8range range. PostgreSQL only.
Sequelize.RANGE(Sequelize.DATE)       // Defines tstzrange range. PostgreSQL only.
Sequelize.RANGE(Sequelize.DATEONLY)   // Defines daterange range. PostgreSQL only.
Sequelize.RANGE(Sequelize.DECIMAL)    // Defines numrange range. PostgreSQL only.

Sequelize.ARRAY(Sequelize.RANGE(Sequelize.DATE)) // Defines array of tstzrange ranges. PostgreSQL only.

Sequelize.GEOMETRY                    // Spatial column.  PostgreSQL (with PostGIS) or MySQL only.
Sequelize.GEOMETRY(&#39;POINT&#39;)           // Spatial column with geometry type. PostgreSQL (with PostGIS) or MySQL only.
Sequelize.GEOMETRY(&#39;POINT&#39;, 4326)     // Spatial column with geometry type and SRID.  PostgreSQL (with PostGIS) or MySQL only.
</code></pre>

<h1 id="toc_4">Model getter，setter定义</h1>

<pre><code>//Defining as part of a property

const Employee = sequelize.define(&#39;employee&#39;, {
  name: {
    type: Sequelize.STRING,
    allowNull: false,
    get() {
      const title = this.getDataValue(&#39;title&#39;);
      // &#39;this&#39; allows you to access attributes of the instance
      return this.getDataValue(&#39;name&#39;) + &#39; (&#39; + title + &#39;)&#39;;
    },
  },
  title: {
    type: Sequelize.STRING,
    allowNull: false,
    set(val) {
      this.setDataValue(&#39;title&#39;, val.toUpperCase());
    }
  }
});

Employee
  .create({ name: &#39;John Doe&#39;, title: &#39;senior engineer&#39; })
  .then(employee =&gt; {
    console.log(employee.get(&#39;name&#39;)); // John Doe (SENIOR ENGINEER)
    console.log(employee.get(&#39;title&#39;)); // SENIOR ENGINEER
  })
  
  
  
  
  //Defining as part of the model options

  const Foo = sequelize.define(&#39;foo&#39;, {
  firstname: Sequelize.STRING,
  lastname: Sequelize.STRING
}, {
  getterMethods: {
    fullName() {
      return this.firstname + &#39; &#39; + this.lastname
    }
  },

  setterMethods: {
    fullName(value) {
      const names = value.split(&#39; &#39;);

      this.setDataValue(&#39;firstname&#39;, names.slice(0, -1).join(&#39; &#39;));
      this.setDataValue(&#39;lastname&#39;, names.slice(-1).join(&#39; &#39;));
    },
  }
});
</code></pre>

<h1 id="toc_5">索引</h1>

<pre><code>sequelize.define(&#39;user&#39;, {}, {
  indexes: [
    // Create a unique index on poem
    {
      unique: true,
      fields: [&#39;poem&#39;]
    },

    // Creates a gin index on data with the jsonb_path_ops operator
    {
      fields: [&#39;data&#39;],
      using: &#39;gin&#39;,
      operator: &#39;jsonb_path_ops&#39;
    },

    // By default index name will be [table]_[fields]
    // Creates a multi column partial index
    {
      name: &#39;public_by_author&#39;,
      fields: [&#39;author&#39;, &#39;status&#39;],
      where: {
        status: &#39;public&#39;
      }
    },

    // A BTREE index with a ordered field
    {
      name: &#39;title_index&#39;,
      method: &#39;BTREE&#39;,
      fields: [&#39;author&#39;, {attribute: &#39;title&#39;, collate: &#39;en_US&#39;, order: &#39;DESC&#39;, length: 5}]
    }
  ]
})
</code></pre>

<h1 id="toc_6">事务</h1>

<pre><code>//Managed transaction (auto-callback)

return sequelize.transaction(function (t) {

  // chain all your queries here. make sure you return them.
  return User.create({
    firstName: &#39;Abraham&#39;,
    lastName: &#39;Lincoln&#39;
  }, {transaction: t}).then(function (user) {
    return user.setShooter({
      firstName: &#39;John&#39;,
      lastName: &#39;Boothe&#39;
    }, {transaction: t});
  });

}).then(function (result) {
  // Transaction has been committed
  // result is whatever the result of the promise chain returned to the transaction callback
}).catch(function (err) {
  // Transaction has been rolled back
  // err is whatever rejected the promise chain returned to the transaction callback
});
</code></pre>

<pre><code>// Unmanaged transaction (then-callback)
return sequelize.transaction().then(function (t) {
  return User.create({
    firstName: &#39;Bart&#39;,
    lastName: &#39;Simpson&#39;
  }, {transaction: t}).then(function (user) {
    return user.addSibling({
      firstName: &#39;Lisa&#39;,
      lastName: &#39;Simpson&#39;
    }, {transaction: t});
  }).then(function () {
    return t.commit();
  }).catch(function (err) {
    return t.rollback();
  });
});
</code></pre>

<h1 id="toc_7">Hooks</h1>

<pre><code>(1)
  beforeBulkCreate(instances, options)
  beforeBulkDestroy(options)
  beforeBulkUpdate(options)
(2)
  beforeValidate(instance, options)
(-)
  validate
(3)
  afterValidate(instance, options)
  - or -
  validationFailed(instance, options, error)
(4)
  beforeCreate(instance, options)
  beforeDestroy(instance, options)
  beforeUpdate(instance, options)
  beforeSave(instance, options)
  beforeUpsert(values, options)
(-)
  create
  destroy
  update
(5)
  afterCreate(instance, options)
  afterDestroy(instance, options)
  afterUpdate(instance, options)
  afterSave(instance, options)
  afterUpsert(created, options)
(6)
  afterBulkCreate(instances, options)
  afterBulkDestroy(options)
</code></pre>

<h2 id="toc_8">Hooks 声明</h2>

<pre><code>// Method 1 via the .define() method
const User = sequelize.define(&#39;user&#39;, {
  username: DataTypes.STRING,
  mood: {
    type: DataTypes.ENUM,
    values: [&#39;happy&#39;, &#39;sad&#39;, &#39;neutral&#39;]
  }
}, {
  hooks: {
    beforeValidate: (user, options) =&gt; {
      user.mood = &#39;happy&#39;;
    },
    afterValidate: (user, options) =&gt; {
      user.username = &#39;Toni&#39;;
    }
  }
});

// Method 2 via the .hook() method (or its alias .addHook() method)
User.hook(&#39;beforeValidate&#39;, (user, options) =&gt; {
  user.mood = &#39;happy&#39;;
});

User.addHook(&#39;afterValidate&#39;, &#39;someCustomName&#39;, (user, options) =&gt; {
  return sequelize.Promise.reject(new Error(&quot;I&#39;m afraid I can&#39;t let you do that!&quot;));
});

// Method 3 via the direct method
User.beforeCreate((user, options) =&gt; {
  return hashPassword(user.password).then(hashedPw =&gt; {
    user.password = hashedPw;
  });
});

User.afterValidate(&#39;myHookAfter&#39;, (user, options) =&gt; {
  user.username = &#39;Toni&#39;;
});
</code></pre>

<h2 id="toc_9">Hooks使用</h2>

<h3 id="toc_10">Instance hooks</h3>

<pre><code>The following hooks will emit whenever you&#39;re editing a single object

beforeValidate
afterValidate or validationFailed
beforeCreate / beforeUpdate  / beforeDestroy
afterCreate / afterUpdate / afterDestroy

// ...define ...
User.beforeCreate(user =&gt; {
  if (user.accessLevel &gt; 10 &amp;&amp; user.username !== &quot;Boss&quot;) {
    throw new Error(&quot;You can&#39;t grant this user an access level above 10!&quot;)
  }
})

</code></pre>

<h3 id="toc_11">Model hooks</h3>

<pre><code>Sometimes you&#39;ll be editing more than one record at a time by utilizing the bulkCreate, update, destroy methods on the model. The following will emit whenever you&#39;re using one of those methods:

beforeBulkCreate(instances, options)
beforeBulkUpdate(options)
beforeBulkDestroy(options)
afterBulkCreate(instances, options)
afterBulkUpdate(options)
afterBulkDestroy(options)

Model.destroy({ where: {accessLevel: 0}, individualHooks: true});
// Will select all records that are about to be deleted and emit before- + after- Destroy on each instance

Model.update({username: &#39;Toni&#39;}, { where: {accessLevel: 0}, individualHooks: true});
// Will select all records that are about to be updated and emit before- + after- Update on each instance

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PostgresSQL]]></title>
    <link href="http://daycoding.com/15114058607700.html"/>
    <updated>2017-11-23T10:57:40+08:00</updated>
    <id>http://daycoding.com/15114058607700.html</id>
    <content type="html"><![CDATA[
<p><strong>转自整理：</strong><br/>
<a href="http://www.ruanyifeng.com/blog/2013/12/getting_started_with_postgresql.html">PostgreSQL新手入门</a></p>

<h2 id="toc_0">安装</h2>

<blockquote>
<blockquote>
<p>apt-get install postgresql-client</p>

<p>apt-get install postgresql</p>
</blockquote>
</blockquote>

<p>正常情况下，安装完成后，PostgreSQL服务器会自动在本机的5432端口开启。</p>

<p>安装图形管理界面</p>

<blockquote>
<blockquote>
<p>apt-get install pgadmin3</p>
</blockquote>
</blockquote>

<h2 id="toc_1">添加用户和数据库</h2>

<p>初次安装后，默认生成一个名为<code>postgres</code>的数据库和一个名为<code>postgres</code>的数据库用户。这里需要注意的是，同时还生成了一个名为<code>postgres</code>的<code>Linux</code>系统用户。</p>

<h3 id="toc_2">使用PostgreSQL控制台创建用户和数据库</h3>

<p>1、新建一个Linux新用户，可以取你想要的名字，这里为dbuser。</p>

<blockquote>
<blockquote>
<p>sudo adduser dbuser</p>
</blockquote>
</blockquote>

<p>2、切换到postgres用户。</p>

<blockquote>
<blockquote>
<p>sudo supostgres</p>
</blockquote>
</blockquote>

<p>3、psql命令登录PostgreSQL控制台。</p>

<blockquote>
<blockquote>
<p>psql</p>
</blockquote>
</blockquote>

<p>这时相当于系统用户<code>postgres</code>以<strong>同名数据库用户的身份</strong>，登录数据库，这是不用输入密码的。如果一切正常，系统提示符会变为<code>postgres=#</code>，表示这时已经进入了数据库控制台。以下的命令都在控制台内完成。</p>

<ul>
<li><p>第一件事是使用<code>\password</code>命令，为<code>postgres</code>用户设置一个密码。</p>

<blockquote>
<blockquote>
<p>\password postgres</p>
</blockquote>
</blockquote></li>
<li><p>第二件事是创建数据库用户<strong>dbuser</strong>（刚才创建的是Linux系统用户），并设置密码。</p>

<blockquote>
<blockquote>
<p>CREATE USER dbuser WITH PASSWORD &#39;password&#39;;</p>
</blockquote>
</blockquote></li>
<li><p>第三件事是创建用户数据库，这里为<code>exampledb</code>，并指定所有者为<code>dbuser</code>。</p>

<blockquote>
<blockquote>
<p>CREATE DATABASE exampledb OWNER dbuser;</p>
</blockquote>
</blockquote></li>
<li><p>第四件事是将<code>exampledb</code>数据库的所有权限都赋予<code>dbuser</code>，否则<code>dbuser</code>只能登录控制台，没有任何数据库操作权限。</p>

<blockquote>
<blockquote>
<p>GRANT ALL PRIVILEGES ON DATABASE exampledb to dbuser;</p>
</blockquote>
</blockquote></li>
<li><p>最后，使用\q命令退出控制台（也可以直接按ctrl+D）。</p>

<blockquote>
<blockquote>
<p>\q</p>
</blockquote>
</blockquote></li>
</ul>

<h3 id="toc_3">使用Shell命令行创建用户和数据库</h3>

<ul>
<li><p>首先，创建数据库用户<code>dbuser</code>，并指定其为超级用户。</p>

<blockquote>
<blockquote>
<p>sudo -u postgres createuser --superuser dbuser</p>
</blockquote>
</blockquote></li>
<li><p>然后，登录数据库控制台，设置<code>dbuser</code>用户的密码，完成后退出控制台。</p>

<blockquote>
<blockquote>
<p>sudo -u postgres psql<br/>
\password dbuser<br/>
\q</p>
</blockquote>
</blockquote></li>
<li><p>接着，在<code>shell</code>命令行下，创建数据库<code>exampledb</code>，并指定所有者为<code>dbuser</code>。</p>

<blockquote>
<blockquote>
<p>sudo -u postgres createdb -O dbuser exampledb</p>
</blockquote>
</blockquote></li>
</ul>

<h2 id="toc_4">登录数据库</h2>

<p>添加新用户和新数据库以后，就要以新用户的名义登录数据库，这时使用的是<code>psql</code>命令。</p>

<blockquote>
<blockquote>
<p>psql -U dbuser -d exampledb -h 127.0.0.1 -p 5432</p>
</blockquote>
</blockquote>

<p>上面命令的参数含义如下：<br/>
 -U指定用户<br/>
 -d指定数据库<br/>
 -h指定服务器<br/>
 -p指定端口。</p>

<p>输入上面命令以后，系统会提示输入<code>dbuser</code>用户的密码。输入正确，就可以登录控制台了。<br/>
<code>psql</code>命令存在简写形式。如果当前<code>Linux</code>系统用户，同时也是<code>PostgreSQL</code>用户，则可以省略用户名（-U参数的部分）。举例来说，我的<code>Linux</code>系统用户名为<code>ruanyf</code>，且<code>PostgreSQL</code>数据库存在同名用户，则我以<code>ruanyf</code>身份登录Linux系统后，可以直接使用下面的命令登录数据库，且不需要密码。</p>

<blockquote>
<blockquote>
<p>psql exampledb</p>
</blockquote>
</blockquote>

<p>此时，如果<code>PostgreSQL</code>内部还存在与当前系统用户同名的数据库，则连数据库名都可以省略。比如，假定存在一个叫做<code>ruanyf</code>的数据库，则直接键入<code>psql</code>就可以登录该数据库。</p>

<blockquote>
<blockquote>
<p>psql</p>
</blockquote>
</blockquote>

<p>另外，如果要恢复外部数据，可以使用下面的命令。</p>

<blockquote>
<blockquote>
<p>psql exampledb &lt; exampledb.sql</p>
</blockquote>
</blockquote>

<h2 id="toc_5">常用命令</h2>

<p>除了前面已经用到的<code>\password</code>命令（设置密码）和<code>\q</code>命令（退出）以外，控制台还提供一系列其他命令。</p>

<pre><code>\h：查看SQL命令的解释，比如\h select。
\?：查看psql命令列表。
\l：列出所有数据库。
\c [database_name]：连接其他数据库。
\d：列出当前数据库的所有表格。
\d [table_name]：列出某一张表格的结构。
\du：列出所有用户。
\e：打开文本编辑器。
\conninfo：列出当前数据库和连接的信息。
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS11 NavigationBar 适配]]></title>
    <link href="http://daycoding.com/15099405809795.html"/>
    <updated>2017-11-06T11:56:20+08:00</updated>
    <id>http://daycoding.com/15099405809795.html</id>
    <content type="html"><![CDATA[
<p>iOS11 navigationItem.titleView 适配问题，最近由于Apple 更新了iOS 11版本，在系统升级之后，发现项目中之前适配好的titleView 发生了如下变化：<br/>
iOS 11 之前<br/>
\<br/>
iOS 11<br/>
\<br/>
WTF?<br/>
在iOS 11中titleView的宽度设置了没有效果，也没有拉伸展示，缩成一坨了。项目中有好多地方用到了titleView这个属性，怎么办？<br/>
打开Xcode 查看视图层级功能，发现在iOS 11 中Apple 改变了UINavigationBar的视图层级，titleView不是加到NavigationBar上了，而是加到UINavigationBarContentView上<br/>
那么怎么解决这个问题呢？<br/>
在你自定义的titleView中重写intrinsicContentSize 的Get 方法,如下：<br/>
- (CGSize)intrinsicContentSize<br/>
{<br/>
return UILayoutFittingExpandedSize;<br/>
}</p>

<p>3.3 titleView支持autolayout</p>

<p>这要求titleView必须是能够自撑开的或实现了- intrinsicContentSize，</p>

<p>适配前<br/>
这里以UISearchBar为例, 我是外层添加了titleView容器. 高度控制着35的.</p>

<pre><code>// 设置titleView
UIView *titleView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 200, 35)];//allocate titleView
[titleView setBackgroundColor:[UIColor clearColor]];
// 搜索工具条
UISearchBar *searchBar = [[UISearchBar alloc] init];
searchBar.placeholder = @&quot;|搜索会员&quot;;
searchBar.frame = CGRectMake(0, 0, titleView.width, 30);
searchBar.center = titleView.center;
searchBar.delegate = self;
[titleView addSubview:searchBar];

[self.navigationItem.titleView sizeToFit];
self.navigationItem.titleView = titleView;
</code></pre>

<p>修改后, 发现UISearchBar圆角变形了,</p>

<p>UISearchBar圆角变形<br/>
这个时候我们可以添加设置圆角的, 效果如下:</p>

<p>searchBar.layer.cornerRadius = 10;<br/>
searchBar.layer.masksToBounds = YES;</p>

<p>适配后<br/>
如果是自定义titleview, 只需要在你自定义的titleview对应的 View中实现- intrinsicContentSize方法;<br/>
- (CGSize)intrinsicContentSize {<br/>
    return UILayoutFittingExpandedSize;<br/>
}<br/>
如果你的项目是自定义的navigationBar，那么在iOS11上运行就可能出现布局错乱，解决办法是重写UINavigationBar的 layoutSubviews方法，调整布局，代码如下：<br/>
- (void)layoutSubviews {<br/>
    [super layoutSubviews];</p>

<pre><code>//注意导航栏及状态栏高度适配
self.frame = CGRectMake(0, 0, CGRectGetWidth(self.frame), naviBarHeight);
for (UIView *view in self.subviews) {
    if([NSStringFromClass([view class]) containsString:@&quot;Background&quot;]) {
        view.frame = self.bounds;
    }
    else if ([NSStringFromClass([view class]) containsString:@&quot;ContentView&quot;]) {
        CGRect frame = view.frame;
        frame.origin.y = statusBarHeight;
        frame.size.height = self.bounds.size.height - frame.origin.y;
        view.frame = frame;
    }
}
</code></pre>

<p>}</p>

<p>作者：smile丽语<br/>
链接：<a href="http://www.jianshu.com/p/a674d5e19260">http://www.jianshu.com/p/a674d5e19260</a><br/>
來源：简书<br/>
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>

<p><a href="https://stackoverflow.com/questions/45350035/ios-11-searchbar-in-navigationbar">https://stackoverflow.com/questions/45350035/ios-11-searchbar-in-navigationbar</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[水波动画,类似咻咻咻]]></title>
    <link href="http://daycoding.com/15096738267082.html"/>
    <updated>2017-11-03T09:50:26+08:00</updated>
    <id>http://daycoding.com/15096738267082.html</id>
    <content type="html"><![CDATA[
<pre><code> // 设定为缩放
    CABasicAnimation *sizeAnimation = [CABasicAnimation animationWithKeyPath:@&quot;transform.scale&quot;];

    // 动画选项设定
    sizeAnimation.repeatCount = CGFLOAT_MAX; // 重复次数
    sizeAnimation.autoreverses = NO; // 动画结束时执行逆动画

// 缩放倍数
    sizeAnimation.fromValue = [NSNumber numberWithFloat:0.5]; // 开始时的倍率
    sizeAnimation.toValue = [NSNumber numberWithFloat:1.4]; // 结束时的倍率

    CABasicAnimation *alphanitation = [CABasicAnimation animationWithKeyPath:@&quot;opacity&quot;];
    alphanitation.fromValue = @(1);
    alphanitation.toValue = @(0);


/* 动画组 */
    CAAnimationGroup *group = [CAAnimationGroup animation];
// 动画选项设定
    group.duration = 1;
    group.repeatCount = CGFLOAT_MAX;
    // 确保controller display 在进入的时候还是继续执行动画
    // 默认状态下 动画在viewcontroller display的时候会立刻结束动画，但是finish的bool值是false
    group.removedOnCompletion = NO;
// 添加动画
    group.animations = [NSArray arrayWithObjects:sizeAnimation, alphanitation,nil];
    [waveView.layer addAnimation:group forKey:@&quot;anitation&quot;];
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[结构体封装成对象]]></title>
    <link href="http://daycoding.com/%E7%BB%93%E6%9E%84%E4%BD%93%E5%B0%81%E8%A3%85%E6%88%90NSValue%E5%AF%B9%E8%B1%A1.html"/>
    <updated>2017-10-20T11:36:34+08:00</updated>
    <id>http://daycoding.com/%E7%BB%93%E6%9E%84%E4%BD%93%E5%B0%81%E8%A3%85%E6%88%90NSValue%E5%AF%B9%E8%B1%A1.html</id>
    <content type="html"><![CDATA[
<p><strong>转载：</strong><a href="http://blog.csdn.net/yangbingbinga/article/details/43114469">http://blog.csdn.net/yangbingbinga/article/details/43114469</a></p>

<pre><code>typedef  struct{  //自定义一个结构体  
    int age;  
    int number;  
}Student;  

Student stu = {&quot;lisi&quot;,&#39;m&#39;,20,90};
  
NSValue *stu=[NSValue valueWithBytes:&amp;stu objCtype :@encode(Student)];//把结构体封装成一个对象  
  
  
Student  value2;//定义一个结构体变量来接受从NSValue得到的结构体  
  
  
[stu getValue:&amp;value2];//把 stu对象中的结构体取出来  
  
  
int a=value2.age;  //取得结构体中的字段 

</code></pre>

<p>其他,系统自带的  </p>

<pre><code>
CGPoint p=[value  CGPointValue];  
系统自带的创建 NSValue 和  获取 CG结构体值的方法
NSValue *v=[NSValue valueWithCGRect:CGRectMake(0, 0, 0, 0)];  
CGRect rect=[v CGRectValue];  
NSValue *v2=[NSValue valueWithCGSize:CGSizeZero];  
CGSize size=[v2 CGSizeValue];  
NSValue *v3=[NSValue valueWithCGPoint:CGPointMake(0, 0)];  
CGPoint p=[v3 CGPointValue];  

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vue学习]]></title>
    <link href="http://daycoding.com/15064062122465.html"/>
    <updated>2017-09-26T14:10:12+08:00</updated>
    <id>http://daycoding.com/15064062122465.html</id>
    <content type="html"><![CDATA[
<p>模板<code>methods</code>中不能使用箭头函数，要使用<code>function</code><br/>
如</p>

<pre><code>export default {
    name: &#39;layerList&#39;,

    data() {
      return {
        &#39;sssss&#39;: &#39;ddd&#39;,
      };
    },
    methods: {
      addClient: function()//这里要使用function不能使用=》,因为函数里的this和vue中this代指不同 
      {
        this.sssss = &#39;ddddaaaaa&#39;;

      },
      onResultChange: (val) =&gt; {
        this.sssss = val;
      },
    },
  };
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://daycoding.com/15058259666834.html"/>
    <updated>2017-09-19T20:59:26+08:00</updated>
    <id>http://daycoding.com/15058259666834.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[webGL浏览器支持]]></title>
    <link href="http://daycoding.com/14944963010893.html"/>
    <updated>2017-05-11T17:51:41+08:00</updated>
    <id>http://daycoding.com/14944963010893.html</id>
    <content type="html"><![CDATA[
<p><img src="media/14944963010893/14980083105786.jpg" alt=""/><br/>
<a href="http://caniuse.com/#search=gl">WebGL 浏览器支持</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IQKeyboardManager是一个非常方便的库，但是使用的时候有一个坑，一直困扰了我很久。]]></title>
    <link href="http://daycoding.com/14944738769390.html"/>
    <updated>2017-05-11T11:37:56+08:00</updated>
    <id>http://daycoding.com/14944738769390.html</id>
    <content type="html"><![CDATA[
<p>在没使用IQKerboard之前，给一个textField添加点击事件，只需要在</p>

<ul>
<li>(BOOL)textFieldShouldBeginEditing:(UITextField *)textField {
   if(textField == myTextField) {
        do something....
        return NO;
   }else {
        return YES;
   }
}
这样就能很简单地做一些操作。
但是在集成了IQKeyboard之后，就会有一个问题，当一个页面有多个textField之后，点击任意一个textfield，IQKeyboard都会强制执行textFieldShouldBeginEditing这个代理方法，而且是多次执行，执行的次数取决于你有多少个textfield添加了delegate。所以就会出现一个很尴尬的情况：
我第二个textfield有一个点击事件，添加代理，放在代理方法内判断执行，但是第一个textfield并没有添加代理，当我点击第一个textfield的时候，就会强制执行shouldBegin这个方法，方法的参数是添加带来的第二个textfield。。。。。。</li>
</ul>

<p>解决办法想了好几种，一开始是想添加事件</p>

<p>[tf addTarget:self action:@selector(textfieldTapped) forControlEvents:UIControlEventTouchDown];<br/>
- (BOOL)textFieldShouldBeginEditing:(UITextField *)textField {<br/>
    if(textField == myTextField) {<br/>
         return NO;<br/>
    }else {<br/>
         return YES;<br/>
    }<br/>
}<br/>
但是这样我测试的时候发现当我轻点一下会没有效果，只有重按一下才行，不知道是不是哪里出了问题？<br/>
后来又想到</p>

<ul>
<li>(void)textFieldDidBeginEditing:(UITextField *)textField {
if(textField == myTextField) {
     [textField performSelector:@selector(resignFirstResponder) withObject:nil afterDelay:0];
     do something......
}
}
当进入到这个方法内的时候，键盘已经弹出来了，这时候虽然用这个方法能把键盘再收回去，但屏幕上还是能看到，体验很不好。
解决方案很多，但都不完美。后来在作者的issues里发现作者说了这个</li>
</ul>

<p>When textField is requested to test that it can become first responder using &#39;[textField canBecomeFirstResponder]; then it asks for it&#39;s delegate via &#39;textFieldShouldBeginEditing&#39; that it can become first responder or not.<br/>
I&#39;m asking for &#39;canBecomeFirstResponder&#39; in &#39;IQUIView+Hierarchy.m&#39; line no. 118.<br/>
I tried by adding controlEvents action on textField, but no luck.<br/>
We really need to find out a solution for this case.<br/>
command+shift+o进入这个分类里面，看到这个属性</p>

<p>/**<br/>
 Returns YES if IQKeyboardManager asking for canBecomeFirstResponder. Useful when doing custom work in textFieldShouldBeginEditing: delegate.<br/>
/**<br/>
@property (nonatomic, readonly) BOOL isAskingCanBecomeFirstResponder;<br/>
好像明白了什么。。。</p>

<ul>
<li>(BOOL)textFieldShouldBeginEditing:(UITextField *)textField {
if (textField == myTextField1) {
    if (textField.isAskingCanBecomeFirstResponder == NO) {
        NSLog(@&quot;do something...&quot;);
    }
    return NO;
}else if (textField == myTextField2) {
    if (textField.isAskingCanBecomeFirstResponder == NO) {
        NSLog(@&quot;do another something...&quot;);
    }
    return NO;
}else {
  return YES;
}
}
这样就能完美解决每个添加delegate的textfield都会调用textFieldShouldBeginEditing而产生的问题了！！！
事实证明，还是应该多看看作者的源码啊。。。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PM2日志分割]]></title>
    <link href="http://daycoding.com/14914632553537.html"/>
    <updated>2017-04-06T15:20:55+08:00</updated>
    <id>http://daycoding.com/14914632553537.html</id>
    <content type="html"><![CDATA[
<p>pm2的日志文件默认在根目录下的.pm2/logs文件夹中，每个程序都会自动生成一个out.log和error.log文件。但是程序的日志只会写在这个两个文件中，并不会自动分割。</p>

<p>如果程序的日志量很大，而且长期运行必然使out.log的文件会无限增大。打开日志很慢，日志跟踪就成了问题。</p>

<p>解决的办法就是进行日志分割。本文是使用logrotate进行分割。</p>

<p>使用<code>liunx</code>的<code>logrotate</code></p>

<p>在pm2的官方文档中，提供了使用logrotate的方案<code>sudo pm2 logrotate -u user</code></p>

<p>会自动生成一个<code>logrotate</code>的默认配置文件，文件路径为<code>/etc/logrotate.d/pm2-user</code>，配置内容为：</p>

<pre><code>/home/user/.pm2/pm2.log /home/user/.pm2/logs/*.log {
        rotate 12
        weekly
        missingok
        notifempty
        compress
        delaycompress
        create 0640 user user
}
</code></pre>

<p><strong>这里</strong>：</p>

<p><code>rotate 12</code>：存储归档日志的最大个数，超过就会更早的日志文件删除，一直保持12个；<br/>
<code>weekly</code>：日志文件按周轮询，其值可以为：<code>daily</code>、<code>weekly</code>、<code>monthly</code>、<code>yearly</code>；<br/>
<code>missingok</code>：在日志轮循期间，任何错误将被忽略，例如“文件无法找到”之类的错误；<br/>
<code>notifempty</code>：如果日志文件为空，轮循不会进行；<br/>
<code>compress</code>：在轮循任务完成后，已轮循的归档将使用<code>gzip</code>进行压缩；<br/>
<code>delaycompress</code>：总是与<code>compress</code>选项一起用，<code>delaycompress</code>选项指示<code>logrotate</code>不要将最近的归档压缩，压缩将在下一次轮循周期进行。这在你或任何软件仍然需要读取最新归档时很有用；<br/>
<code>create 0640 user user</code>：以指定的权限创建全新的日志文件，同时logrotate也会重命名原始日志文件。</p>

<p><strong>还可以添加以下配置</strong>：<br/>
<code>dateext</code>：让旧日志文件以创建日期命名；<br/>
<code>size=50M</code>：日志文件以50MB的大小作为一次轮询<br/>
<code>prerotate/endscript</code>：在转储以前需要执行的命令可以放入这个对，这两个关键字必须单独成行<br/>
<code>postrotate/endscript</code>：在转储以后需要执行的命令可以放入这个对，这两个关键字必须单独成行<br/>
在此我们可以定制化的修改配置，比如想要每周轮询一次，并且以日期进行命名，则：</p>

<pre><code>/home/user/.pm2/pm2.log /home/user/.pm2/logs/*.log {
        rotate 12
        weekly
        dateext
        missingok
        notifempty
        compress
        delaycompress
        create 0640 user user
        postrotate
             pm2 reloadLogs
        endscript
}
</code></pre>

<p>这个生成出来的日志就是以<code>out.log-日期</code>的格式。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Promise 使用]]></title>
    <link href="http://daycoding.com/14909323944752.html"/>
    <updated>2017-03-31T11:53:14+08:00</updated>
    <id>http://daycoding.com/14909323944752.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">.spread</h2>

<pre><code>//对应promise数组里的返回值
.spread(
    [function(any values...) fulfilledHandler]
) -&gt; Promise


Promise.all([
    fs.readFileAsync(&quot;file1.txt&quot;),
    fs.readFileAsync(&quot;file2.txt&quot;)
]).spread(function(file1text, file2text) {
    if (file1text === file2text) {
        console.log(&quot;files are equal&quot;);
    }
    else {
        console.log(&quot;files are not equal&quot;);
    }
});

Promise.delay(500).then(function() {
   return [fs.readFileAsync(&quot;file1.txt&quot;),
           fs.readFileAsync(&quot;file2.txt&quot;)] ;
}).spread(function(file1text, file2text) {
    if (file1text === file2text) {
        console.log(&quot;files are equal&quot;);
    }
    else {
        console.log(&quot;files are not equal&quot;);
    }
});
</code></pre>

<h2 id="toc_1">.tap</h2>

<pre><code>.tap(function(any value) handler) -&gt; Promise

getUser().tap(function(user) {
  //Like in finally, if you return a promise from the handler
  //the promise is awaited for before passing the original value through
  return recordStatsAsync();
}).then(function(user) {
  //user is the user from getUser(), not recordStatsAsync()
});
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NPM 使用]]></title>
    <link href="http://daycoding.com/14904296924146.html"/>
    <updated>2017-03-25T16:14:52+08:00</updated>
    <id>http://daycoding.com/14904296924146.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">查看npm 版本</h2>

<pre><code>npm -v
</code></pre>

<h2 id="toc_1">更新NPM最新版本</h2>

<pre><code>npm install npm@latest -g
</code></pre>

<h2 id="toc_2">安装packeage</h2>

<pre><code>npm install &lt;package_name&gt;  //install locally，会创建node_modules文件夹并放入其中
</code></pre>

<h2 id="toc_3">package.json管理package</h2>

<p>优点：</p>

<ul>
<li>通过文件管理项目所依赖模块</li>
<li>能够制定使用特定版本的模块</li>
<li>更方便多人协作开发</li>
</ul>

<p><code>package.json</code>最少含有下面属性：<br/>
* <code>name</code>：不能有空格<br/>
* <code>version</code>：x.x.x格式</p>

<pre><code>{
  &quot;name&quot;: &quot;my-awesome-package&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;
}
</code></pre>

<h3 id="toc_4">创建package.json</h3>

<pre><code>npm init //会有帮助提示
npm init --yes //不会有帮助提示
</code></pre>

<p>demo：</p>

<pre><code>{
  &quot;name&quot;: &quot;my_package&quot;,
  &quot;description&quot;: &quot;&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;main&quot;: &quot;index.js&quot;,
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;
  },
  &quot;repository&quot;: {
    &quot;type&quot;: &quot;git&quot;,
    &quot;url&quot;: &quot;https://github.com/ashleygwilliams/my_package.git&quot;
  },
  &quot;keywords&quot;: [],
  &quot;author&quot;: &quot;&quot;,
  &quot;license&quot;: &quot;ISC&quot;,
  &quot;bugs&quot;: {
    &quot;url&quot;: &quot;https://github.com/ashleygwilliams/my_package/issues&quot;
  },
  &quot;homepage&quot;: &quot;https://github.com/ashleygwilliams/my_package&quot;
}
</code></pre>

<ul>
<li><code>name</code>:当前文件夹名称</li>
<li><code>version</code>:默认‘1.0.0’</li>
<li><code>description</code>:描述,作用同readme</li>
<li><p><code>main</code>:默认<code>index.js</code></p>

<h3 id="toc_5">在package.json 中指定依赖包</h3></li>
<li><p><code>dependencies</code>:应用用到的依赖</p></li>
<li><p><code>devDependencies</code>:只有开发和测试时需要用到的</p></li>
</ul>

<pre><code>npm install &lt;package_name&gt; --save  //添加到`package.json`中的 `dependencies`
npm install &lt;package_name&gt; --save-dev  //添加到`package.json`中的 `devDependencies`

</code></pre>

<h2 id="toc_6">更新package</h2>

<pre><code>npm update  //与`package.json`在同级下执行命令
</code></pre>

<h2 id="toc_7">删除package</h2>

<pre><code>npm uninstall lodash
npm uninstall --save lodash//会更新到`package.json`
</code></pre>

<h2 id="toc_8">全局global安装package</h2>

<pre><code>npm install -g &lt;package&gt;
</code></pre>

<h2 id="toc_9">全局global更新package</h2>

<pre><code>npm update -g &lt;package&gt;
</code></pre>

<h2 id="toc_10">全局global删除package</h2>

<pre><code>npm uninstall -g &lt;package&gt;
</code></pre>

<h2 id="toc_11">Package与Modules</h2>

<ul>
<li><code>package</code>:是在<code>package.json</code>中描述的。可以是一个文件或是一个目录</li>
<li><code>module</code>:能被<code>Node.js</code> <strong>require()</strong>的称为<code>module</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reids使用]]></title>
    <link href="http://daycoding.com/14903271954232.html"/>
    <updated>2017-03-24T11:46:35+08:00</updated>
    <id>http://daycoding.com/14903271954232.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">启动客户端</h2>

<pre><code>$ redis-cli
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PostGreSql导表]]></title>
    <link href="http://daycoding.com/14901728464166.html"/>
    <updated>2017-03-22T16:54:06+08:00</updated>
    <id>http://daycoding.com/14901728464166.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">导出表</h2>

<p><code>pg_dump -h 10.15.128.51 -U postgres -d lakala -t \&quot;DailyActiveTerminalInfos\&quot; &gt;daily.sql；</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node 学习]]></title>
    <link href="http://daycoding.com/14896551414725.html"/>
    <updated>2017-03-16T17:05:41+08:00</updated>
    <id>http://daycoding.com/14896551414725.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">全局对象和全局变量</h2>

<p>它们是所有模块都可以调用的。<br/>
全局对象：</p>

<blockquote>
<blockquote>
<p><code>global</code>：表示Node所在的全局环境，类似于浏览器的window对象。需要注意的是，如果在浏览器中声明一个全局变量，实际上是声明了一个全局对象的属性，比如var x = 1等同于设置window.x = 1，但是Node不是这样，至少在模块中不是这样（REPL环境的行为与浏览器一致）。在模块文件中，声明var x = 1，该变量不是global对象的属性，global.x等于undefined。这是因为模块的全局变量都是该模块私有的，其他模块无法取到。<br/>
<code>process</code>：该对象表示Node所处的当前进程，允许开发者与该进程互动。<br/>
<code>console</code>：指向Node内置的console模块，提供命令行环境中的标准输入、标准输出功能。<br/>
<code>Buffer</code>:Node处理二进制数据的一个接口。</p>
</blockquote>
</blockquote>

<p>全局变量：</p>

<blockquote>
<blockquote>
<p>__filename：指向当前运行的脚本文件名。<br/>
__dirname：指向当前运行的脚本所在的目录。</p>
</blockquote>
</blockquote>

<h2 id="toc_1">核心模块</h2>

<p>Node.js的用处在于，它本身还提供了一系列功能模块，与操作系统互动。这些核心的功能模块，不用安装就可以使用</p>

<blockquote>
<blockquote>
<p><code>http</code>：提供HTTP服务器功能。<br/>
<code>url</code>：解析URL。<br/>
<code>fs</code>：与文件系统交互。<br/>
<code>querystring</code>：解析URL的查询字符串。<br/>
<code>child_process</code>：新建子进程。<br/>
<code>util</code>：提供一系列实用小工具。<br/>
<code>path</code>：处理文件路径。<br/>
<code>crypto</code>：提供加密和解密功能，基本上是对OpenSSL的包装。</p>
</blockquote>
</blockquote>

<h2 id="toc_2">Child Process模块</h2>

<p>child_process模块用于新建子进程。子进程的运行结果储存在系统缓存之中（最大200KB），等到子进程运行结束以后，主进程再用回调函数读取子进程的运行结果。</p>

<h2 id="toc_3">Node 升级</h2>

<p>node有一个模块叫n，是专门用来管理node.js的版本的。<br/>
首先安装n模块：</p>

<pre><code>npm install -g n
</code></pre>

<p>升级node.js到最新稳定版</p>

<pre><code>n stable
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用正则]]></title>
    <link href="http://daycoding.com/14892247193418.html"/>
    <updated>2017-03-11T17:31:59+08:00</updated>
    <id>http://daycoding.com/14892247193418.html</id>
    <content type="html"><![CDATA[
<p>数字和字母组合4-20位</p>

<p><code>^(?!([a-zA-Z]+|\d+)$)[a-zA-Z\d]{3,19}$</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sequelize. 钩子]]></title>
    <link href="http://daycoding.com/14892215616260.html"/>
    <updated>2017-03-11T16:39:21+08:00</updated>
    <id>http://daycoding.com/14892215616260.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0"><code>user.update</code> 调用</h3>

<pre><code>hooks: {
    beforeUpdate(user, options, next) {
         bcrypt.genSalt(10, (err, salt) =&gt; {
                    bcrypt.hash(user.password, salt, null, (error, hash) =&gt; {
                        user.password = hash;
                        next(null, user);
                    });
                });
            }     
        }
</code></pre>

<h1 id="toc_1">sequelize 事务</h1>

<pre><code>return db.lakalaSequelize.transaction(t =&gt;
                    Promise.map(sqlArray, (sql, index) =&gt; db.lakalaSequelize.query(sql,
                        { type: db.lakalaSequelize.QueryTypes.SELECT, transaction: t })
                    .then((result) =&gt; {
                        if (!_.isEmpty(result)) {
                            const item = itemArray[index];
                            item.BUSINESS_NAME = result[0].business_name;
                            item.MERCHANT_CODE = result[0].merchant_code;
                            item.MERCHANT_ADDR = result[0].MERCHANT_ADDR;
                            return item;
                        }
                        return itemArray[index];
                    }))).then(result =&gt; result);
</code></pre>

<h1 id="toc_2">Sequelize 外键</h1>

<p>数据库中的表之间存在一定的关联关系，表之间的关系基于主/外键进行关联、创建约束等。关系表中的数据分为1对1(1:1)、1对多(1:M)、多对多(N:M)三种关联关系。</p>

<p>在<code>Sequelize</code>中建立关联关系，通过调用模型(源模型)的<code>belongsTo</code>、<code>hasOne</code>、<code>hasMany</code>、<code>belongsToMany</code>方法，再将要建立关系的模型(目标模型)做为参数传入即可。这些方法会按以下规则创建关联关系：</p>

<blockquote>
<blockquote>
<p>hasOne - 与目标模型建立1:1关联关系，关联关系(外键)存在于目标模型中。详见：Model.hasOne()</p>

<p>belongsTo - 与目标模型建立1:1关联关系，关联关系(外键)存在于源模型中。详见：Model.belongsTo()</p>

<p>hasMany - 与目标模型建立1:N关联关系，关联关系(外键)存在于目标模型中。详见：Model.hasMany()</p>

<p>belongsToMany - 与目标模型建立N:M关联关系，会通过sourceId和targetId创建交叉表。详见：Model.belongsToMany()</p>
</blockquote>
</blockquote>

<ul>
<li>用户(User)－与其它模型存在1:1、1:N、N:M</li>
<li>用户登录信息(UserCheckin)－与User存在1:1关系</li>
<li>用户地址(UserAddress)－与User存在N:1关系</li>
<li>角色(Role)－与User存在N:M关系</li>
</ul>

<p><img src="media/14892215616260/14920682242135.png" alt=""/></p>

<pre><code>module.exports = function (sequelize, DataTypes) {
  return sequelize.define(&#39;User&#39;, {
    id:{type:DataTypes.BIGINT(11), autoIncrement:true, primaryKey : true, unique : true},
    username: { type: DataTypes.STRING,  allowNull: false, comment:&#39;用户名&#39; },
    password: { type: DataTypes.STRING, allowNull: false, comment:&#39;用户密码&#39; },
    active: { type: DataTypes.BOOLEAN, allowNull: false, defaultValue: true, comment:&#39;是否正常状态&#39; }
  },
  {
    timestamps: true,
    underscored: true,
    paranoid: true,
    freezeTableName: true,
    tableName: &#39;user&#39;,
    charset: &#39;utf8&#39;,
    collate: &#39;utf8_general_ci&#39;
});
}

module.exports = function (sequelize, DataTypes) {
  return sequelize.define(&#39;UserCheckin&#39;, {
    id: { type: DataTypes.BIGINT(11), autoIncrement: true, primaryKey: true, unique: true },
    userId: { 
      type: DataTypes.BIGINT(11), 
      field: &#39;user_id&#39;,
      unique: true, 
      references: {
        model: &#39;User&#39;,
        key: &#39;id&#39;
      },
      comment:&#39;用户Id&#39; },
    loginIp: { type: DataTypes.STRING, field: &#39;login_ip&#39;, allowNull: false, defaultValue: &#39;&#39; , validate: {isIP: true}, comment:&#39;登录IP&#39;}
  },
  {
    underscored: true,
    timestamps: true,
    tableName: &#39;userCheckin&#39;,
    comment: &#39;用户登录信息&#39;,
    charset: &#39;utf8&#39;,
    collate: &#39;utf8_general_ci&#39;,
    indexes: [{
      name: &#39;userCheckin_userId&#39;,
      method: &#39;BTREE&#39;,
     fields: [&#39;user_id&#39;]
    }]
  });
}

module.exports = function (sequelize, DataTypes) {
  return sequelize.define(&#39;UserAddress&#39;, {
    id: { type: DataTypes.BIGINT(11), autoIncrement: true, primaryKey: true, unique: true, comment:&#39;主键&#39; },
    userId: {type: DataTypes.BIGINT(11), field: &#39;user_id&#39;, allowNull: false, comment:&#39;用户Id&#39; },
    consignee : { type: DataTypes.STRING, field: &#39;consignee&#39;, allowNull: false, comment:&#39;收货人&#39; },
    address: { type: DataTypes.STRING(1024), field: &#39;address&#39;, allowNull: false, comment:&#39;详细地址&#39; },
    zipCode: { type: DataTypes.STRING(16), field: &#39;zip_code&#39;, allowNull: true, comment:&#39;邮编&#39; },
    tel: { type: DataTypes.STRING(32), field: &#39;tel&#39;, allowNull: false, comment:&#39;电话&#39; },
  },
  {
    underscore: true,
    timestamps: false,
    freezeTableName: true,
    tableName: &#39;userAddress&#39;,
    comment: &#39;用户地址表&#39;,
    charset: &#39;utf8&#39;,
    collate: &#39;utf8_general_ci&#39;,
    indexes: [{
      name: &#39;userAddress_userId&#39;,
      method: &#39;BTREE&#39;,
      fields: [&#39;user_id&#39;]
    }]
  });
}
</code></pre>

<p><code>User</code>模型与<code>UserAddress</code>存在1:N的关联关系，但在这样我们并没有用<code>references</code>特性显式的指定外键。这是因为，<code>Sequlieze</code>不仅可以在模型定义时指定外键，还可以在建立模型关系时指定，甚至主外键关系并不需要显示的存在，只要在建立模型关系时指定关联键即可。</p>

<pre><code>module.exports = function (sequelize, DataTypes) {
  return sequelize.define(&#39;Role&#39;, {
    id: { type: DataTypes.BIGINT(11), autoIncrement: true, primaryKey: true, unique: true, comment:&#39;角色Id&#39; },
    roleName: { type: DataTypes.STRING, field: &#39;role_name&#39;, comment:&#39;角色名&#39; }
  },
  {
    underscored: true,
    timestamps: false,
    freezeTableName: true,
    tableName: &#39;role&#39;,
    charset: &#39;utf8&#39;,
    collate: &#39;utf8_general_ci&#39;
  });
}
</code></pre>

<p><code>Role</code>模型与<code>User</code>存在N:M的关系，这样就需要两者通过一个关系表（关系模型）进行关联。但并不需要手工建立这个关系表，指定关联关系后<code>Sequelize</code>会自动创建关系表。</p>

<p>注意：在上面定义模型时，我们使用了<code>comment</code>属性添加字段描述。经测试及查看<code>Sequlize</code>源码，这一特性并不会向数据中添加相关描述信息，但仍然建议添加这一属性以增强代码的可读性。</p>

<h2 id="toc_3">模型关联与数据库同步</h2>

<p>定义好模型后，就可以建立模型关联关系，并将模型及关系同步到数据库中。</p>

<p>模型导入</p>

<p>在上面定义模型时，我们每个模型定义为了单独的文件，这样就需要通过<code>sequlize.import()</code>方法导入模型：</p>

<pre><code>var sequelize=require(&#39;./_db&#39;).sequelize();
var User = sequelize.import(&#39;./user.js&#39;);
var UserCheckin = sequelize.import(&#39;./userCheckin.js&#39;);
var UserAddress = sequelize.import(&#39;./userAddress.js&#39;);
var Role = sequelize.import(&#39;./role.js&#39;);

</code></pre>

<p>关系建立</p>

<p>导入后，建立模型关系：</p>

<pre><code>// 建立模型之间的关系
User.hasOne(UserCheckin);
UserCheckin.belongsTo(User);
User.hasMany(UserAddress, {foreignKey:&#39;user_id&#39;, targetKey:&#39;id&#39;, as:&#39;Address&#39;});
User.belongsToMany(Role, {through: &#39;userRoles&#39;, as:&#39;UserRoles&#39;});
Role.belongsToMany(User, {through: &#39;userRoles&#39;, as:&#39;UserRoles&#39;});
</code></pre>

<p>在定义<code>UserAddress</code>模型时，我们没有定义关联模型，所以需要在<code>hasMany()</code>方法中通过<code>foreignKey</code>和<code>targetKey</code>来指定关联关系(主外键关系)，指定后该关系同样会被同步到数据库中。除指定关联关系外，我们还指定了<code>as</code>选项，该选项表示“<strong>别名</strong>”，<strong>目标模型会混入到源模型后会使用该名称。</strong></p>

<p>通过<strong>belongsToMany()</strong>方法建立<code>Role</code>与<code>User</code>之间的关系时，设置了<code>through</code>选项，该选项表示“<strong>关系</strong>”（可以是一个模型或字符串，使用字符串时表示在数据库中表名）。</p>

<h2 id="toc_4">同步数据库</h2>

<p>建立关联关系后，调用<code>sequelize.sync()</code>方法即可以将模型及关联关系同步到数据库中。</p>

<h2 id="toc_5">外键例子理解</h2>

<p><a href="http://docs.sequelizejs.com/manual/tutorial/associations.html">官方文档</a></p>

<pre><code>const User = this.sequelize.define(&#39;user&#39;, {/* attributes */})
const Company  = this.sequelize.define(&#39;company&#39;, {/* attributes */});

User.belongsTo(Company); // Will add companyId to user

const User = this.sequelize.define(&#39;user&#39;, {/* attributes */}, {underscored: true}) // 不已驼峰形式命名 而是用下划线
const Company  = this.sequelize.define(&#39;company&#39;, {
  uuid: {
    type: Sequelize.UUID,
    primaryKey: true
  }
});

User.belongsTo(Company); // Will add company_uuid to user

</code></pre>

<pre><code>const User = this.sequelize.define(&#39;user&#39;, {/* attributes */})
const UserRole  = this.sequelize.define(&#39;userRole&#39;, {/* attributes */});

User.belongsTo(UserRole, {as: &#39;role&#39;}); // Adds roleId to user rather than userRoleId

</code></pre>

<pre><code>const User = this.sequelize.define(&#39;user&#39;, {/* attributes */})
const Company  = this.sequelize.define(&#39;company&#39;, {/* attributes */});

User.belongsTo(Company, {foreignKey: &#39;fk_company&#39;}); // Adds fk_company to User
</code></pre>

<pre><code>const User = this.sequelize.define(&#39;user&#39;, {/* attributes */})
const Company  = this.sequelize.define(&#39;company&#39;, {/* attributes */});

User.belongsTo(Company, {foreignKey: &#39;fk_companyname&#39;, targetKey: &#39;name&#39;}); // Adds fk_companyname to User
</code></pre>

<pre><code>Project.belongsToMany(User, {through: &#39;UserProject&#39;});
User.belongsToMany(Project, {through: &#39;UserProject&#39;});
</code></pre>

<pre><code>// Series has a trainer_id=Trainer.id foreign reference key after we call Trainer.hasMany(series)
const Series = sequelize.define(&#39;series&#39;, {
  title:        DataTypes.STRING,
  sub_title:    DataTypes.STRING,
  description:  DataTypes.TEXT,

  // Set FK relationship (hasMany) with `Trainer`
  trainer_id: {
    type: DataTypes.INTEGER,
    references: {
      model: &quot;trainer&quot;,
      key: &quot;id&quot;
    }
  }
})

const Trainer = sequelize.define(&#39;trainer&#39;, {
  first_name: DataTypes.STRING,
  last_name:  DataTypes.STRING
});

// Video has a series_id=Series.id foreign reference key after we call Series.hasOne(Video)...
const Video = sequelize.define(&#39;video&#39;, {
  title:        DataTypes.STRING,
  sequence:     DataTypes.INTEGER,
  description:  DataTypes.TEXT,

  // set relationship (hasOne) with `Series`
  series_id: {
    type: DataTypes.INTEGER,
    references: {
      model: Series, // Can be both a string representing the table name, or a reference to the model
      key:   &quot;id&quot;
    }
  }
});

Series.hasOne(Video);
Trainer.hasMany(Series);
</code></pre>

<p>理解:<br/>
1. 无论是<code>hasOne</code>还是<code>belongsTo</code>，左面的都是源对象（source）右面都是目标对象（target）<br/>
2. 不指定<code>sourceKey</code>或者<code>targetKey</code>都是指<strong>对象主键列作为外键所指向的列</strong><br/>
3. <code>as</code>作为别名，能替代外键名称，如 <code>roleID</code>代替<code>userRoleId</code>,同时<code>getRole</code>、<code>setRole</code>代替<code>getUserRole</code>、<code>setUserRole</code><br/>
4. 可以使用<code>foreignKey</code>指定外键名称来替代默认的<code>modelId</code>名称<br/>
5. <code>belongsTo</code>模式下外键默认在<strong>源目标对象</strong>上，外键默认指向<strong>目标对象主键列</strong>，使用<code>targetKey</code>来<strong>改变外键指向列</strong><br/>
6. <code>belongsToMany</code>会生成中间表，<code>through</code>指定表名</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[passport]]></title>
    <link href="http://daycoding.com/14892005669552.html"/>
    <updated>2017-03-11T10:49:26+08:00</updated>
    <id>http://daycoding.com/14892005669552.html</id>
    <content type="html"><![CDATA[
<p>passport的验证过程主要依赖具体的验证策略来实现的，比较常用的有session策略、local策略和github策略等，验证逻辑都是在这些策略类中定义的。passport模块的定义主要包括三个部分：passport类、相关中间件和验证策略，passport自带了session验证策略，如果要使用其他验证策略，需要自行添加。</p>

<pre><code>    passport的使用分为五个部分：
</code></pre>

<p>首先必须通过app.use(passport.initialize())对passport进行初始化，否则后面的验证方法无法执行<br/>
在全局范围内添加session验证中间件，app.use(passport.session());，这个主要是为了记住用户的登录状态，可以指定session过期时间<br/>
给passport添加验证策略<br/>
在具体的路由上使用第三步中添加的验证中间件<br/>
给passport定义序列化和反序列化函数</p>

<p>Username &amp; Password</p>

<p>The most widely used way for websites to authenticate users is via a username and password. Support for this mechanism is provided by the passport-local module.</p>

<p>Install</p>

<p>$ npm install passport-local<br/>
Configuration</p>

<p>var passport = require(&#39;passport&#39;)<br/>
  , LocalStrategy = require(&#39;passport-local&#39;).Strategy;</p>

<p>passport.use(new LocalStrategy(<br/>
  function(username, password, done) {<br/>
    User.findOne({ username: username }, function(err, user) {<br/>
      if (err) { return done(err); }<br/>
      if (!user) {<br/>
        return done(null, false, { message: &#39;Incorrect username.&#39; });<br/>
      }<br/>
      if (!user.validPassword(password)) {<br/>
        return done(null, false, { message: &#39;Incorrect password.&#39; });<br/>
      }<br/>
      return done(null, user);<br/>
    });<br/>
  }<br/>
));<br/>
The verify callback for local authentication accepts username and password arguments, which are submitted to the application via a login form.</p>

<p>Form</p>

<p>A form is placed on a web page, allowing the user to enter their credentials and log in.</p>

<form action="/login" method="post">
    <div>
        <label>Username:</label>
        <input type="text" name="username"/>
    </div>
    <div>
        <label>Password:</label>
        <input type="password" name="password"/>
    </div>
    <div>
        <input type="submit" value="Log In"/>
    </div>
</form>

<p>Route</p>

<p>The login form is submitted to the server via the POST method. Using authenticate() with the local strategy will handle the login request.</p>

<p>app.post(&#39;/login&#39;,<br/>
  passport.authenticate(&#39;local&#39;, { successRedirect: &#39;/&#39;,<br/>
                                   failureRedirect: &#39;/login&#39;,<br/>
                                   failureFlash: true })<br/>
);<br/>
Setting the failureFlash option to true instructs Passport to flash an error message using the message option set by the verify callback above. This is helpful when prompting the user to try again.</p>

<p>Parameters</p>

<p>By default, LocalStrategy expects to find credentials in parameters named username and password. If your site prefers to name these fields differently, options are available to change the defaults.</p>

<p>passport.use(new LocalStrategy({<br/>
    usernameField: &#39;email&#39;,<br/>
    passwordField: &#39;passwd&#39;<br/>
  },<br/>
  function(username, password, done) {<br/>
    // ...<br/>
  }<br/>
));</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SVGKit 导入]]></title>
    <link href="http://daycoding.com/14875633942562.html"/>
    <updated>2017-02-20T12:03:14+08:00</updated>
    <id>http://daycoding.com/14875633942562.html</id>
    <content type="html"><![CDATA[
<p>framework导入<br/>
```objc</p>

<h1 id="toc_0">import <CocoaLumberjack/CocoaLumberjack.h></h1>

<h1 id="toc_1">ifdef DEBUG</h1>

<p>static const DDLogLevel ddLogLevel = DDLogLevelVerbose;</p>

<h1 id="toc_2">else</h1>

<p>static const DDLogLevel ddLogLevel = DDLogLevelWarning;</p>

<h1 id="toc_3">endif</h1>

<pre><code>
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[拦截UIViewController的popViewController事件]]></title>
    <link href="http://daycoding.com/%E6%8B%A6%E6%88%AAPopViewController%E7%9A%84popViewController%E4%BA%8B%E4%BB%B6.html"/>
    <updated>2016-12-26T15:33:14+08:00</updated>
    <id>http://daycoding.com/%E6%8B%A6%E6%88%AAPopViewController%E7%9A%84popViewController%E4%BA%8B%E4%BB%B6.html</id>
    <content type="html"><![CDATA[
<p>实现拦截<code>UIViewController</code>的<code>pop</code>操作有两种方式：</p>

<ul>
<li>自定义实现返回按钮，即设置<code>UIBarButtonItem</code>来实现自定义的返回操作。</li>
<li>创建<code>UINavigatonController</code>的<code>Category</code>，来定制<code>navigationBar: shouldPopItem:</code>的逻辑。</li>
</ul>

<p><strong>UIViewController+BackButtonHandler.h：</strong></p>

<pre><code class="language-objc">#import &lt;UIKit/UIKit.h&gt;

@protocol BackButtonHandlerProtocol &lt;NSObject&gt;
@optional
// Override this method in UIViewController derived class to handle &#39;Back&#39; button click
-(BOOL)navigationShouldPopOnBackButton;
@end

@interface UIViewController (BackButtonHandler) &lt;BackButtonHandlerProtocol&gt;

@end
</code></pre>

<p><strong>UIViewController+BackButtonHandler.m：</strong></p>

<pre><code class="language-objc">#import &quot;UIViewController+BackButtonHandler.h&quot;

@implementation UIViewController (BackButtonHandler)

@end

@implementation UINavigationController (ShouldPopOnBackButton)

- (BOOL)navigationBar:(UINavigationBar *)navigationBar shouldPopItem:(UINavigationItem *)item {

    if([self.viewControllers count] &lt; [navigationBar.items count]) {
        return YES;
    }

    BOOL shouldPop = YES;
    UIViewController* vc = [self topViewController];
    if([vc respondsToSelector:@selector(navigationShouldPopOnBackButton)]) {
        shouldPop = [vc navigationShouldPopOnBackButton];
    }

    if(shouldPop) {
        dispatch_async(dispatch_get_main_queue(), ^{
            [self popViewControllerAnimated:YES];
        });
    } else {
        // Workaround for iOS7.1. Thanks to @boliva - http://stackoverflow.com/posts/comments/34452906
        for(UIView *subview in [navigationBar subviews]) {
            if(0. &lt; subview.alpha &amp;&amp; subview.alpha &lt; 1.) {
                [UIView animateWithDuration:.25 animations:^{
                    subview.alpha = 1.;
                }];
            }
        }
    }

    return NO;
}

</code></pre>

<p><strong>使用：</strong></p>

<ul>
<li>在<code>UIViewController</code>当中引入头文件</li>
</ul>

<pre><code>#import &quot;UIViewController+BackButtonHandler.h&quot;
</code></pre>

<ul>
<li>在<code>UIViewController</code>中实现<code>navigationShouldPopOnBackButton</code>方法。</li>
</ul>

<pre><code class="language-objc">- (BOOL)navigationShouldPopOnBackButton{
    [[[UIAlertView alloc] initWithTitle:@&quot;提示&quot; message:@&quot;确定返回上一界面?&quot;
                               delegate:self cancelButtonTitle:@&quot;取消&quot; otherButtonTitles:@&quot;确定&quot;, nil] show];
    //renturn no 拦截pop事件
    return NO;
}
</code></pre>

<p><strong>参考：</strong></p>

<ul>
<li><p><a href="http://www.jianshu.com/p/25fd027916fa">iOS拦截导航栏返回按钮事件的正确方式</a></p></li>
<li><p><a href="https://github.com/onegray/UIViewController-BackButtonHandler">UIViewController-BackButtonHandler</a></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
